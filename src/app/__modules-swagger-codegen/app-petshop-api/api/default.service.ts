/**
 * Swagger Petstore
 * A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient,
    HttpHeaders,
    HttpParams,
    HttpResponse,
    HttpEvent
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs/Observable';

import { ErrorModel } from '../model/errorModel';
import { NewPet } from '../model/newPet';
import { Pet } from '../model/pet';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable()
export class DefaultService {
    protected basePath = '';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(
        protected httpClient: HttpClient,
        @Optional() @Inject(BASE_PATH) basePath: string,
        @Optional() configuration: Configuration
    ) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    /**
     *
     * Creates a new pet in the store.  Duplicates are allowed
     * @param pet Pet to add to the store
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addPet(
        pet: NewPet,
        observe?: 'body',
        reportProgress?: boolean
    ): Observable<Pet>;
    public addPet(
        pet: NewPet,
        observe?: 'response',
        reportProgress?: boolean
    ): Observable<HttpResponse<Pet>>;
    public addPet(
        pet: NewPet,
        observe?: 'events',
        reportProgress?: boolean
    ): Observable<HttpEvent<Pet>>;
    public addPet(
        pet: NewPet,
        observe: any = 'body',
        reportProgress: boolean = false
    ): Observable<any> {
        if (pet === null || pet === undefined) {
            throw new Error(
                'Required parameter pet was null or undefined when calling addPet.'
            );
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = ['application/json'];
        const httpHeaderAcceptSelected:
            | string
            | undefined = this.configuration.selectHeaderAccept(
            httpHeaderAccepts
        );
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = ['application/json'];
        const httpContentTypeSelected:
            | string
            | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Pet>(`${this.basePath}/pets`, pet, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }

    /**
     *
     * deletes a single pet based on the ID supplied
     * @param id ID of pet to delete
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deletePet(
        id: number,
        observe?: 'body',
        reportProgress?: boolean
    ): Observable<any>;
    public deletePet(
        id: number,
        observe?: 'response',
        reportProgress?: boolean
    ): Observable<HttpResponse<any>>;
    public deletePet(
        id: number,
        observe?: 'events',
        reportProgress?: boolean
    ): Observable<HttpEvent<any>>;
    public deletePet(
        id: number,
        observe: any = 'body',
        reportProgress: boolean = false
    ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error(
                'Required parameter id was null or undefined when calling deletePet.'
            );
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = ['application/json'];
        const httpHeaderAcceptSelected:
            | string
            | undefined = this.configuration.selectHeaderAccept(
            httpHeaderAccepts
        );
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = ['application/json'];

        return this.httpClient.delete<any>(
            `${this.basePath}/pets/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * Returns a user based on a single ID, if the user does not have access to the pet
     * @param id ID of pet to fetch
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findPetById(
        id: number,
        observe?: 'body',
        reportProgress?: boolean
    ): Observable<Pet>;
    public findPetById(
        id: number,
        observe?: 'response',
        reportProgress?: boolean
    ): Observable<HttpResponse<Pet>>;
    public findPetById(
        id: number,
        observe?: 'events',
        reportProgress?: boolean
    ): Observable<HttpEvent<Pet>>;
    public findPetById(
        id: number,
        observe: any = 'body',
        reportProgress: boolean = false
    ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error(
                'Required parameter id was null or undefined when calling findPetById.'
            );
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml',
            'text/html'
        ];
        const httpHeaderAcceptSelected:
            | string
            | undefined = this.configuration.selectHeaderAccept(
            httpHeaderAccepts
        );
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = ['application/json'];

        return this.httpClient.get<Pet>(
            `${this.basePath}/pets/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * Returns all pets from the system that the user has access to
     * @param tags tags to filter by
     * @param limit maximum number of results to return
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findPets(
        tags?: Array<string>,
        limit?: number,
        observe?: 'body',
        reportProgress?: boolean
    ): Observable<Array<Pet>>;
    public findPets(
        tags?: Array<string>,
        limit?: number,
        observe?: 'response',
        reportProgress?: boolean
    ): Observable<HttpResponse<Array<Pet>>>;
    public findPets(
        tags?: Array<string>,
        limit?: number,
        observe?: 'events',
        reportProgress?: boolean
    ): Observable<HttpEvent<Array<Pet>>>;
    public findPets(
        tags?: Array<string>,
        limit?: number,
        observe: any = 'body',
        reportProgress: boolean = false
    ): Observable<any> {
        let queryParameters = new HttpParams({
            encoder: new CustomHttpUrlEncodingCodec()
        });
        if (tags) {
            queryParameters = queryParameters.set(
                'tags',
                tags.join(COLLECTION_FORMATS['csv'])
            );
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml',
            'text/html'
        ];
        const httpHeaderAcceptSelected:
            | string
            | undefined = this.configuration.selectHeaderAccept(
            httpHeaderAccepts
        );
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = ['application/json'];

        return this.httpClient.get<Array<Pet>>(`${this.basePath}/pets`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
}
